swagger: '2.0'
info:
  version: '2.2.1'
  title: "SAFExchange"
  x-summary: Collection of API provided by the web service PRICE
  description: This is the API documentation for the __*SAFExchange*__ project.
  contact:
    name: Francesco Bruschetti, Filippo Nardin, Davide Farina
  license:
    name: MIT
    url: https://github.com/apiaryio/polls-api/blob/master/LICENSE
host: safexchange.herokuapp.com
basePath: /
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:

###################### ACCOUNT # COMPLETED 
  /account/googleSignIn:
    post:
      summary: POST for Google Sign In
      description: |
        This API is used when the user wants to Sign In using Google.
      tags:
        - account
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/Google'  
      responses:
        200:
          description: Success
          examples:
            application/json:
              iss: 'accounts.google.com'
              azp: '533024552572-ltbl4ks1kib5qod9cgihc2ppjhcdem2l.apps.googleusercontent.com'
              aud: '533024552572-ltbl4ks1kib5qod9cgihc2ppjhcdem2l.apps.googleusercontent.com'
              sub: '107360525933532801390'
              hd: 'studenti.unitn.it'
              email: 'francesco.bruschetti@studenti.unitn.it'
              email_verified: true
              at_hash: 'TiKlw3sUgYoK_nxMShS-LQ'
              name: 'Francesco Bruschetti'
              picture: 'https://lh4.googleusercontent.com/-V5mZEUxEFqY/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQN20FvlQfrTxYzNOACE9CklD3uvBQ/s96-c/photo.jpg'
              given_name: 'Francesco'
              family_name: 'Bruschetti'
              locale: 'it'
              iat: 1549191087
              exp: 1549194687
              jti: c35a6f3f064f095c1131d0dc79c539dc21e556f9'
              success: true

  /account/facebookSignIn:
    post:
      summary: POST for Facebook Sign In
      description: |
        This API is used when the user wants to Sign In using Facebook.
      tags:
        - account
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/Facebook'  
      responses:
        200:
          description: Success
          schema:
            type: object
            properties:
              Success:
                type: boolean
          examples:
            application/json:
              Success: true 

  /account/mailRegister: 
    post:
      summary: POST allows the user to Register with email
      tags:
        - account
      parameters:
        - name: req
          in: body
          required: true
          schema:
            properties:
              name:
                type: string
                example: 'Test Name'
              image_url:
                type: string
                example: 'https://www.iconspng.com/images/-abstract-user-icon-1/-abstract-user-icon-1.jpg'
              email:
                type: string
                example: 'test@email.it'
              password:
                type: string
                example: 'Password1' 
      responses:
        200:
          description: Success
          schema:
              properties:
                success:
                  type: boolean
          examples: # 
            application/json:
              success: 'false'
              message: 'Mail already taken'

  /account/mailSignIn: 
    post:
      summary: POST allows the user to Login with email
      tags:
        - account
      parameters:
        - name: req
          in: body
          required: true
          schema:
            properties:
              email:
                type: string
                example: 'test@email.it'
              password:
                type: string
                example: 'Password1'
        
      responses:
        200:
          description: Success
          schema:
            properties:
              Success:
                type: boolean  
          examples:
            application/json:
              Success: true

###################### ACTION # COMPLETED 
  /action/buy:
    post:
      summary: POST action BUY
      description: |
        __HOW TO TEST:__ In order to work, the following API need a __session__ to be stored on the client. The schema of the session is:
          {
            _id: _user._id,
            name: _user.name,
            email: _user.email,
            image_url: _user.image_url
          }
      tags:
        - action
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActionBuy'
      responses:
        200:
          description: Success
          schema:
              type: object
              properties:
                Success:
                  type: boolean
                message:
                  type: string
                  
  /action/sell:
    post:
      summary: POST action SELL
      description: |
        __HOW TO TEST:__ In order to work, the following API need a __session__ to be stored on the client. The schema of the session is:
          {
            _id: _user._id,
            name: _user.name,
            email: _user.email,
            image_url: _user.image_url
          }
      tags:
        - action
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActionSell'
      responses:
        200:
          description: Success
          schema:
              type: object
              properties:
                Success:
                  type: boolean
                message:
                  type: string
  
  /action/edit_money:
    post:
      summary: POST action edit user money
      description: |
        __HOW TO TEST:__ In order to work, the following API need a __session__ to be stored on the client. The schema of the session is:
          {
            _id: _user._id,
            name: _user.name,
            email: _user.email,
            image_url: _user.image_url
          }
      tags:
        - action
      parameters:
        - name: req
          in: body
          required: true
          schema:
            type: object
            properties:
              amount:
                type: integer
      responses:
        200:
          description: Success
          schema:
              type: object
              properties:
                Success:
                  type: boolean
                message:
                  type: string
  
  /action/plannedaction/buy:
    post:
      summary: POST planned action BUY event
      description: |
        __HOW TO TEST:__ In order to work, the following API need a __session__ to be stored on the client. The schema of the session is:
          {
            _id: _user._id,
            name: _user.name,
            email: _user.email,
            image_url: _user.image_url
          }
      tags:
        - action
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActionPlannedactionBuy'
      responses:
        200:
          description: Success
          schema:
              type: object
              properties:
                Success:
                  type: boolean
                message:
                  type: string
  
  /action/plannedaction/sell:
    post:
      summary: POST planned action SELL event
      description: |
        __HOW TO TEST:__ In order to work, the following API need a __session__ to be stored on the client. The schema of the session is:
          {
            _id: _user._id,
            name: _user.name,
            email: _user.email,
            image_url: _user.image_url
          }
      tags:
        - action
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/ActionPlannedactionSell'
      responses:
        200:
          description: Success
          schema:
              type: object
              properties:
                Success:
                  type: boolean
                message:
                  type: string
  
  /action/plannedaction/{action_id}:
    delete:
      summary: DELETE planned action
      description: |
        __HOW TO TEST:__ In order to work, the following API need a __session__ to be stored on the client. The schema of the session is:
          {
            _id: _user._id,
            name: _user.name,
            email: _user.email,
            image_url: _user.image_url
          }
          
        __IMPORTANT:__  if the __{action_id}__ doesn't exists, schema will contain a field "message" : "Description of the error"
      tags:
        - action
      parameters:
        - name: action_id
          in: path
          description: ID of the plannedaction
          required: true
          type: string
          default: '5c4c31814296b5001795b40b'
      responses: 
        200:
          description: Success
          schema:
              type: object
              properties:
                Success:
                  type: boolean
                message:
                  type: string
                  
###################### DATABASE # COMPLETED
  /database/plannedaction/user/{user_id}:
    get:
      summary: GET the list of all planned action of the specified user
      description: |
        This API allows to retrieve the list of all planned action of the specified user.
        
        __IMPORTANT__: if the ID of the user is invalid or it doesn't belong to any user, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
          
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/PlannedactionSchema'

  /database/plannedaction/{plannedaction_id}:  
    get:
      summary: GET the details of the planned action with the specified ID
      description: |
        __IMPORTANT__: if the ID of the plannedaction is invalid or it doesn't belong to any user, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: plannedaction_id
          in: path
          description: ID of the transaction
          required: true
          type: string
          default: '5c4c31814296b5001795b40b'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/PlannedactionSchema'

    delete:
      summary: DELETE planned action
      description: |
        This API delete the planned action with the specified ID. A deleted planned action won't be triggered when the price of the market will be equal to the one set in the action.
        
        __IMPORTANT__: if one of the ID of the action is invalid or it doesn't belong to any user, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      parameters:
        - name: plannedaction_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c4c31814296b5001795b40b'
      
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/PlannedactionSchema'

    put:
      summary: PUT modify the details of the specified transaction
      description: |
        This API allows to modify the details of the specified transaction.
        
        __IMPORTANT__: if one of the ID of the action is invalid or if the data of the body is invalid, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      parameters:
        - in: path
          name: plannedaction_id
          description: ID of the action
          required: true
          type: string
          default: '5c4c31814296b5001795b40b'
        - in: body
          name: req
          description: "New data for the transaction. __IMPORTANT__: state can only be 'IDLE', 'PROCESSING', 'COMPLETED', 'CANCELED'."
          required: true
          schema: 
            $ref: '#/definitions/PlannedactionPUTRequest'
          
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/PlannedactionSchema'

  /database/plannedaction/:
    post: 
      summary: POST allows user to set a planned action
      description: |
        This API allows user to set a planned action.
        
        __IMPORTANT__: You MUST specify one among BTC and ETH.
        
        In case of error *"impossible to fetch"*, check that the last value in the json does not terminate with a *","*.
      tags:
        - database
      parameters:
        - in: body
          name: state
          description: New state of the transaction
          required: true
          schema: 
            $ref: '#/definitions/PlannedactionRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/PlannedactionSchema'

  /database/price:
    get:
      summary: GET Bitcoin and Ethereum value
      description: |
        This API provides updated values of both Bitcoin and Ethereum from our exchange.
      tags:
        - database
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/Prices'
          examples:
            application/json:
              BTC: 
                _id: '5c507afa1a3910001752de18'
                BTCUSD: 3433.4275
              ETH: 
                _id: '5c507afa1a3910001752de17'
                ETHUSD: 106.1075
                 
    post:
      summary: POST set the value of Bitcoin and Ethereum
      description: |
        This API set values of both Bitcoin and Ethereum.
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/DatabasePostPrice'
      
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/Prices'
          examples:
            application/json:
              BTC: 
                _id: '5c507afa1a3910001752de18'
                BTCUSD: 3433.4275

  /database/price/BTCUSD:
    get:
      summary: GET the value of Bitcoin
      description: |
        This API returns the value of Bitcoin from our exchange.
        Specifing a value for the parameter *"elem_number"*, the user can retrieve the lastest N stored values of Bitcoin.
        __Example:__ /BTCUSD?elem_number=4 will return the latest 4 values of Bitcoin on our exchange.
      tags:
        - database
      parameters:
        - name: elem_number
          in: query
          description: If specified, the API returns the latest N value of Bitcoin stored on the database.
          required: true 
          type: integer
          default: 1
          
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/BTCUSDarray'
          examples:
            application/json:
              - _id: '5c50803d1a3910001752dee4'
                BTCUSD: 3439.0675
              - _id: '5c5080331a3910001752dee3'
                BTCUSD: 3438.8925
              - _id: '5c5080281a3910001752dee1'
                BTCUSD: 3439.3224999999998

  /database/price/ETHUSD:
    get:
      summary: GET the value of Ethereum
      description: |
        This API returns the value of Ethereum on our exchange.
        Specifing a value for the parameter *"elem_number"*, the user can retrieve the lastest N stored values of Ethereum.
        __Example:__ /ETHUSD?elem_number=4 will return the latest 4 values of Bitcoin on our exchange.
      tags:
        - database
      parameters:
        - name: elem_number
          in: query
          description: If specified, the API returns the latest N value of Ethereum stored on the database.
          required: true 
          type: integer
          default: 1
          
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/ETHUSDarray'
          examples:
            application/json:
              - _id: '5c5087271d89e2001739fa41'
                ETHUSD: 105.33250000000001
              - _id: '5c50871c1d89e2001739fa3f'
                ETHUSD: 105.3425
              - _id: '5c5087131d89e2001739fa3e'
                ETHUSD: 105.3675

  /database/transaction/{transaction_id}:
    get:
      summary: GET informations about the specified transaction
      description: |
        This API provide all the informations about the specified transaction.
        
        __IMPORTANT__: if the parameter *"transaction_id"* is not defined or if the IDs are incorrect, the response schema will contain a field "message" : "Description of the error".
        If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: transaction_id
          in: path
          description: ID of the the transaction
          required: true
          type: string
          default: '5c4de5cbf31add5f84e4375f'
          
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/TransactionUser'
          examples:
            application/json:
              _id: '5c4de5cbf31add5f84e4375f'
              author: '5c49e7f329202200177264e7'
              action: 'BUY'
              ETH: 1
              USD: 114.25750000000001

  /database/transaction/user/{user_id}:
    get:
      summary: GET user transaction history
      description: |
        This API provide the full history of transactions performed by the specified user, both for selling and buying.
      tags:
        - database
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
      
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/TransactionUser'
          examples:
            application/json:
              - _id: '5c4de5cbf31add5f84e4375f'
                author: '5c49e7f329202200177264e7'
                action: 'BUY'
                USD: 114.25750000000001 
                ETH: 1
                _v: 0
              - _id: '5c4de5f230a8dc2530b73a0d'
                author: '5c49e7f329202200177264e7'
                action: 'SELL'
                USD: 356.93825 
                ETH: 0.1
                _v: 0

  /database/transaction/:
    post:
      summary: POST allows user to buy/sell
      description: |
        This API allows the user to buy and sell either Bitcoin or Ethereum at the current price.
      tags:
        - database
      parameters:
        - name: req
          description: |
            __IMPORTANT__: ONLY one amoung BTC and ETH CAN be set. You CAN NOT specifiy both of them.
          in: body
          required: true
          schema:
            $ref: '#/definitions/NewUserTransaction'
            
      responses:
        200:
          description: |
            __IMPORTANT__: ONLY one amoung BTC and ETH CAN be set. You CAN NOT specifiy both of them.If both ETH and BTC is specified, the response object will contain a filed 'message': 'Description of the error.'
          schema:
            $ref: '#/definitions/NewUserTransaction'
          examples:
            application/json:
                author: '5c4c430e66f8f600177f2d3f'
                action: 'BUY'
                state: 'IDLE'
                BTC: 3601.00
                USD: 1

  /database/user/id_google:
    put:
      summary: POST edit the Google ID of the user
      description: |
        This API is used to update the Google ID of the user. If the value is not set jet, it will write the received data in the database.
        
        ____IMPORTANT____: if one of the parameters is not defined or if the IDs are incorrect, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/GoogleUser'  
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/GoogleUser'
  
  /database/user/id_facebook:
    put:
      summary: POST edit the Facebook ID of the user
      description: |
        This API is used to update the Facebook ID of the user. If the value is not set jet, it will write the received data in the database.
        
        ____IMPORTANT____: if one of the parameters is not defined or if the IDs are incorrect, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/FacebookUser'  
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/FacebookUser'
  
  /database/user/mail: 
    post:
      summary: POST insert the informations of the mail of the user in the database
      description: |
        This API inserts the informations of the mail of the user in the database.
        
        __IMPORTANT__: You MUST specify Email and Password value or the server will generate and error. Name is optional.
      tags:
        - database
      parameters:
        - name: req
          in: body
          description: User informations
          required: true
          schema:
            $ref: '#/definitions/MailRequest'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/MailResponse'
  
  /database/user/mail/{mail}:
    get:
      summary: GET details of the user that has registered with mail method.
      description: |
        This API retrieve all the informations about the user that has registered to the site through Mail.
        
        __IMPORTANT:__ Response will be __null__ if no user has registered with the specified mail.
      tags:
        - database
      parameters:
        - name: mail
          in: path
          description: mail of the user
          required: true
          type: string
          default: 'francesco.bruschetti@yahoo.it'
          
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/MailResponse'
          examples:
            application/json:
              _id: '5c5406b4eb968f0017bcf388'
              email: 'francesco.bruschetti@yahoo.it'
              name: 'Francesco'
              image_url: 'https://www.iconspng.com/images/-abstract-user-icon-1/-abstract-user-icon-1.jpg'
              password: 'Password'
              ETH: 0
              BTC: 0
              USD: 0
              __v: 0

  /database/user/{user_id}:
    get:
      summary: GET user informations
      description: |
        This API provide all the informations and data of the specified user.
        
        __IMPORTANT__: if one of the parameters is not defined or if the IDs are incorrect, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
          
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/UserProfile'
          examples:
            application/json:
              _id: '5c49e7f329202200177264e7'
              id_google: '101790666037013555749'
              name: 'Francesco Bruschetti'
              image_url: 'https://lh4.googleusercontent.com/-LBYekgpU62I/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQMqqlNHg_c3VJJ8GcpmRWxhCUiSTQ/s96-c/photo.jpg'
              email: 'francesco.bruschetti@studenti.unitn.it'
              __v: 0
              ETH: 117.1
              BTC: 2.5999999999999996
              USD: 583.2955000000002

  /database/user/{user_id}/balance:
    put:
      summary: PUT update the balance of the user
      description: |
        This API allows to initiate and update the balance of the user due to transactions or when it deposits money on its wallet.
        
        __IMPORTANT__: if one of the parameters is not defined or if the IDs are incorrect, the response schema will contain a field "message" : "Description of the error". If everything is correctly set, the response will contain the required data.
      tags:
        - database
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'

      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/UserBalance'
          examples:
            application/json:
              _id: '5c49e7f329202200177264e7'
              id_google: '101790666037013555749'
              name: 'Francesco Bruschetti'
              image_url: 'https://lh4.googleusercontent.com/-LBYekgpU62I/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQMqqlNHg_c3VJJ8GcpmRWxhCUiSTQ/s96-c/photo.jpg'
              email: 'francesco.bruschetti@studenti.unitn.it'
              __v: 0
              ETH: 117.1
              BTC: 2.5999999999999996
              USD: 583.2955000000002
  
  /database/user/{user_id}/{currency}:
    get:
      summary: GET user currency amount
      description: |
        This API gets the amount of a single currency for a certain user.
        
        __IMPORTANT__: Currency can only be BTC or ETH or USD or atherwise the server won't answer.
      tags:
        - database
      parameters:
        - in: path
          name: user_id
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
        - in: path
          name: currency
          description: Currency [BTC or ETH or USD]
          required: true
          type: string
          default: 'USD'
          
      responses:
        200:
          description: Success
          schema:
            type: string

  # da testare è un casino... devo sapere o id_face or id_google
  /database/user:
    post:
      summary: POST allows userto store user information in the database.
      description: |
        This API aallows userto store user information in the database.
        
        __IMPORTANT__: id_google and id_facebook MUST be set mutually exclusive.
      tags:
        - database
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserProfile'

      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/UserProfile'
          examples:
            application/json:
              _id: 'unique_user_id'
              id_google: 'id_google_value'
              name: 'Francesco Bruschetti'
              image_url: 'url_of_profile_image'
              email: 'email'
              __v: 0
              ETH: 0
              BTC: 0
              USD: 0

###################### PLANNED_ACTION # COMPLETED
  /plannedaction/user/{user_id}:
    get:
      summary: GET all the planned actions scheduled by the user
      description: |
        This API allows to get the details of every planned actions the user has scheduled.
        
        __IMPORTANT__: if the __{user_id}__ doesn't exists, response will contain a field "message" : "Description of the error".
      tags:
        - plannedaction
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
      responses: 
        200:
          description: Success
          schema:
              $ref: '#/definitions/PlannedactionSchema'
        
  /plannedaction/{action_id}:
    get:
      summary: GET all the details of the specified planned action
      description: |
        This API returns all the informations about the planned action that has ID equal to the value of the __{action_id}__ parameter value.
        
        __IMPORTANT__: if the __{action_id}__ doesn't exists, response will be __null__.
      tags:
        - plannedaction
      parameters:
        - name: action_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c4c31814296b5001795b40b'
      responses: 
        200:
          description: Success
          schema:
              $ref: '#/definitions/PlannedactionSchema'
          examples: 
            application/text:
              _id: '5c4c31814296b5001795b40b'
              author: '5c49e7f329202200177264e7'
              action: 'SELL'
              USD: 115
              ETH: 115
              __v: 0
              state: 'IDLE'
            
    delete:
      summary: DELETE planned action
      description: |
        This API allows to delete planned action before they're triggered.
        
        __IMPORTANT__: in case of missing fields, the schema will contain a field "message" : "Description of the error".
      parameters:
        - name: action_id
          in: path
          description: ID of the user
          required: true
          type: string
      responses: 
        200:
          description: Success
          schema:
              $ref: '#/definitions/PlannedactionSchema'

  /plannedaction/:
    post:
      summary: POST schedule a new planned action for the future
      description: |
        This API allows the user to schedule an action for the future. It'll be triggered when the price on the server will be equal to the one of the action.
        
        __IMPORTANT__: in case of missing fields, the schema will contain the message 'Error! The body request should contain either the fields USD and BTC or ETH (exclusively)'.
      tags:
        - plannedaction
      parameters:
        - name: req
          in: body
          required: true
          description: "__IMPORTANT__: BTC and ETH ARE MUTUALLY EXCLUSIVE"
          schema:
            $ref: '#/definitions/PlannedactionSchema'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/UserProfile'

  /plannedaction/checkTriggers:
    post:
      summary: POST check if there are planned actions to trigger
      description: |
        This API check if the actual price is equal to the one of the planned actions scheduled by the users. If yes, it'll trigger them.
      tags:
        - plannedaction
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/PlannedActionCheckTriggers'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/CheckTriggersResponse'

###################### PRICE # COMPLETED
  /price/API:
    get:
      summary: GET the list of available actions
      tags:
        - price
      responses:
        200:
          description: List of all actions 
          schema:
            type: string
          examples: # OSS: | means every line is on a distinct one.
            application/text: | 
              GET /prices -> get the latest value of Bitcoin and Ethereum
              GET /BTCUSD  -> get the latest Bitcoin value stored
              GET /BTCUSD?elem_number=N -> get the latest N Bitcoin values stored.
              GET /ETHUSD -> get the latest Ethereum value stored
              GET /ETHUSD?elem_number=N -> get the latest N Ethereum values stored.

  /price/:
    get:
      summary: GET both Bitcoin and Ethereum value
      description: |
        This API provides updated values of both Bitcoin and Ethereum from our exchange.
      tags:
        - price
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/Prices'
          examples:
            application/json:
              BTC: 
                _id: '5c507afa1a3910001752de18'
                BTCUSD: 3433.4275
              ETH: 
                _id: '5c507afa1a3910001752de17'
                ETHUSD: 106.1075

  /price/BTCUSD:
    get:
      summary: GET the value of Bitcoin
      description: |
        This API returns the value of Bitcoin from our exchange.
        Specifying a value for the parameter *"elem_number"*, the user can retrieve the latest N stored values of Bitcoin.
        
        __Example:__ /BTCUSD?elem_number=4 will return the latest 4 values of Bitcoin on our exchange.
      tags:
        - price
      parameters:
        - name: elem_number
          in: query
          description: If specified, the API returns the latest N value of Bitcoin stored on the database.
          required: false 
          type: integer
          default: 1
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/BTCUSDarray'
          examples:
            application/json:
              - _id: '5c50803d1a3910001752dee4'
                BTCUSD: 3439.0675
              - _id: '5c5080331a3910001752dee3'
                BTCUSD: 3438.8925
              - _id: '5c5080281a3910001752dee1'
                BTCUSD: 3439.3224999999998

  /price/ETHUSD:
    get:
      summary: GET the value of Ethereum
      description: |
        This API returns the value of Ethereum from our exchange.
        Specifying a value for the parameter *"elem_number"*, the user can retrieve the latest N stored values of Ethereum.
       
        __Example:__ /ETHUSD?elem_number=4 will return the latest 4 values of Bitcoin on our exchange.
      tags:
        - price
      parameters:
        - name: elem_number
          in: query
          description: If specified, the API returns the latest N value of Ethereum stored on the database.
          required: false 
          type: integer
          default: 1
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/ETHUSDarray'
          examples:
            application/json:
              - _id: '5c5087271d89e2001739fa41'
                ETHUSD: 105.33250000000001
              - _id: '5c50871c1d89e2001739fa3f'
                ETHUSD: 105.3425
              - _id: '5c5087131d89e2001739fa3e'
                ETHUSD: 105.3675

###################### REDIRECT # COMPLETED
  /redirect/user/{user_id}:
    get:
      summary: GET user informations
      description: |
        This API provide all the informations and data of the specified user.
        
        __IMPORTANT__: if the __{user_id}__ doesn't exists, schema will contain a field "message" : "Description of the error".
      tags:
        - redirect
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
      responses: 
        200:
          description: Success
          schema:
              $ref: '#/definitions/UserProfile'
          examples:
            application/json:
              _id: '5c49e7f329202200177264e7'
              id_google: '101790666037013555749'
              name: 'Francesco Bruschetti'
              image_url: 'https://lh4.googleusercontent.com/-LBYekgpU62I/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQMqqlNHg_c3VJJ8GcpmRWxhCUiSTQ/s96-c/photo.jpg'
              email: 'francesco.bruschetti@studenti.unitn.it'
              __v: 0
              ETH: 117.1
              BTC: 2.5999999999999996
              USD: 583.2955000000002
              
  /redirect/price/:
    get:
      summary: GET Bitcoin and Ethereum value
      description: |
        This API provides updated values of both Bitcoin and Ethereum from our exchange.
      tags:
        - redirect
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/Prices'
          examples:
            application/json:
              BTC: 
                _id: '5c507afa1a3910001752de18'
                BTCUSD: 3433.4275
              ETH: 
                _id: '5c507afa1a3910001752de17'
                ETHUSD: 106.1075
                 
  /redirect/price/BTCUSD:
    get:
      summary: GET the value of Bitcoin
      description: |
        This API returns the value of Bitcoin from our exchange.
        Specifing a valure for the parameter *"elem_number"*, the user can retrieve the lastest N stored values of Bitcoin.
        
        __Example:__ /BTCUSD?elem_number=4 will return the latest 4 values of Bitcoin on our exchange.
      tags:
        - redirect
      parameters:
        - name: elem_number
          in: query
          description: |
            If specified, the API returns the latest N value of Bitcoin stored on the database.
            If N <= 0 or if it's not a number or it's not specified, the value will be replace with 0.
          required: false 
          type: integer
          
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/BTCUSDarray'
          examples:
            application/json:
              - _id: '5c50803d1a3910001752dee4'
                BTCUSD: 3439.0675
              - _id: '5c5080331a3910001752dee3'
                BTCUSD: 3438.8925
              - _id: '5c5080281a3910001752dee1'
                BTCUSD: 3439.3224999999998

  /redirect/price/ETHUSD:
    get:
      summary: GET the value of Ethereum
      description: |
        This API returns the value of Ethereum on our exchange.
        Specifing a valure for the parameter *"elem_number"*, the user can retrieve the lastest N stored values of Ethereum.
        
        __Example:__ /ETHUSD?elem_number=4 will return the latest 4 values of Bitcoin on our exchange.
      tags:
        - redirect
      parameters:
        - name: elem_number
          in: query
          description: |
            If specified, the API returns the latest N value of Ethereum stored on the database.
            If N <= 0 or if it's not a number or it's not specified, the value will be replace with 0.
          required: false 
          type: integer
          
      responses:
        200:
          description: Success
          schema:
            type: array
            items: 
              $ref: '#/definitions/ETHUSDarray'
          examples:
            application/json:
              - _id: '5c5087271d89e2001739fa41'
                ETHUSD: 105.33250000000001
              - _id: '5c50871c1d89e2001739fa3f'
                ETHUSD: 105.3425
              - _id: '5c5087131d89e2001739fa3e'
                ETHUSD: 105.3675

  /redirect/transaction/user/{user_id}:
    get:
      summary: GET user transaction history
      description: |
        This API provide the full history of transaction performed by the specified user.
        
        __IMPORTANT__: if the __{user_id}__ doesn't exists, schema will contain a field "message" : "Description of the error".
      tags:
        - redirect
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
      responses:
        200:
          description: Success
          schema: 
              $ref: '#/definitions/TransactionUser'
          examples:
            application/json:
              - _id: '5c4de5cbf31add5f84e4375f'
                author: '5c49e7f329202200177264e7'
                action: 'BUY'
                USD: 114.25750000000001 
                ETH: 1
                _v: 0
              - _id: '5c4de5f230a8dc2530b73a0d'
                author: '5c49e7f329202200177264e7'
                action: 'SELL'
                USD: 356.93825 
                ETH: 0.1
                _v: 0
                  
  /redirect/plannedaction/user/{user_id}:
    get:
      summary: GET all the planned actions scheduled by the user
      description: |
        This API allows to get the details of every planned actions the the user has scheduled.
        
        __IMPORTANT__: if the __{user_id}__ doesn't exists, schema will contain a field "message" : "Description of the error".
      tags:
        - redirect
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
          
      responses:
        200:
          description: Success
          schema:  
              $ref: '#/definitions/UserProfile'
          examples:
            application/json:
              - _id: '5c4c31814296b5001795b40b'
                author: '5c49e7f329202200177264e7'
                action: 'SELL'
                USD: 115
                ETH: 1
                _v: 0
                state: 'IDLE'
              - _id: '5c4c31914296b5001795b40d'
                author: '5c49e7f329202200177264e7'
                action: 'BUY'
                USD: 3550
                BTC: 1
                _v: 0
                state: 'CANCELED'

###################### TRANSACTION # COMPLETED
  /transaction/user/{user_id}:
    get:
      summary: GET user transaction history
      description: |
        This API provides the full history of transactions performed by the specified user.
       
        __IMPORTANT__: if the __{user_id}__ doesn't exists, schema will contain a field "message" : "Description of the error".
      tags:
        - transaction
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/TransactionUser'
          examples:
            application/json:
              - _id: '5c4de5cbf31add5f84e4375f'
                author: '5c49e7f329202200177264e7'
                action: 'BUY'
                USD: 114.25750000000001 
                ETH: 1
                _v: 0
              - _id: '5c4de5f230a8dc2530b73a0d'
                author: '5c49e7f329202200177264e7'
                action: 'SELL'
                USD: 356.93825 
                ETH: 0.1
                _v: 0

  /transaction/: 
    post:
      summary: POST allows user to buy and sell
      description: |
        This API allows the user to buy or sell either Bitcoin or Ethereum at the price if the server.
        
        __IMPORTANT__: ONLY ONE among BTC and ETH must be specified. Be careful not to leave ',' after the last value of the json object, or an error will occur.
      tags:
        - transaction
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/NewUserTransaction'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/NewUserTransaction'
          examples:
            application/json:
                author: '5c4c430e66f8f600177f2d3f'
                action: 'BUY'
                state: 'IDLE'
                BTC: 3601.00
                USD: 1

###################### USER # COMPLETED
  /user/{user_id}:
    get:
      summary: GET user informations
      description: |
        This API provide all the informations and data of the specified user.
        
        __IMPORTANT__: if the __{user_id}__ doesn't exists, schema will contain a field "message" : "Description of the error".
      tags:
        - user
      parameters:
        - name: user_id
          in: path
          description: ID of the user
          required: true
          type: string
          default: '5c49e7f329202200177264e7'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/UserProfile'
          examples:
            application/json:
              _id: '5c49e7f329202200177264e7'
              id_google: '101790666037013555749'
              name: 'Francesco Bruschetti'
              image_url: 'https://lh4.googleusercontent.com/-LBYekgpU62I/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQMqqlNHg_c3VJJ8GcpmRWxhCUiSTQ/s96-c/photo.jpg'
              email: 'francesco.bruschetti@studenti.unitn.it'
              __v: 0
              ETH: 117.1
              BTC: 2.5999999999999996
              USD: 583.2955000000002
  
  /user/{user_id}/balance:
    put:
      summary: PUT update the balance of the user
      description: |
        This API allows to initiate and update the balance of the user due to transactions or when it deposits money on its wallet.
        The specified value of BTC, ETH and USD will be summed up to the one already stored in the database.
      tags:
        - user
      parameters:
        - in: path
          name: user_id
          required: true
          type: string
          description: User ID
          default: '5c49e7f329202200177264e7'
        - in: body
          name: balance
          required: true
          schema: 
            $ref: '#/definitions/UserBalance'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/UserProfile'
          examples:
            application/json:
              _id: '5c49e7f329202200177264e7'
              id_google: '101790666037013555749'
              name: 'Francesco Bruschetti'
              image_url: 'https://lh4.googleusercontent.com/-LBYekgpU62I/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQMqqlNHg_c3VJJ8GcpmRWxhCUiSTQ/s96-c/photo.jpg'
              email: 'francesco.bruschetti@studenti.unitn.it'
              __v: 0
              ETH: 117.1
              BTC: 2.5999999999999996
              USD: 583.2955000000002

  /user/id_google:
    put:
      summary: PUT update the information of the user that has Sign In with Google
      description: |
        This API allows to  update the information of the user that has Sign In with Google.
        
        __IMPORTANT__: the *id_google* MUST BE specified or an error will occour.
      tags:
        - user
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/GoogleUser'   
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/GoogleUser'

  /user/id_facebook:
    put:
      summary: PUT update the Facebook informations of the user
      description: |
        This API allows to update the Facebook date of the user.
        
        __IMPORTANT__: the *id_facebook* MUST BE specified or an error will occour.
      tags:
        - user
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/FacebookUser' 
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/FacebookUser'

  /user/mail: 
    post:
      summary: POST insert the data of the new user
      description: |
        This API allows the user to sign up in the site.
      tags:
        - user
      parameters:
        - name: req
          in: body
          required: true
          schema:
            $ref: '#/definitions/MailRequest'
      responses:
        200:
          description: Success
          schema:
              $ref: '#/definitions/MailResponse'
          examples: 
            application/json:
              email: 'mail@test.it'
              name: 'UsernameTest'
              image_url: 'https://www.iconspng.com/images/-abstract-user-icon-1/-abstract-user-icon-1.jpg'
              password: 'Password'

  /user/mail/{mail}: 
    get:
      summary: GET details of the user that has registered with Mail
      description: |
        This API retrieve all the informations about the user that has registered with the specified mail.
        
        __IMPORTANT__: response will be __null__ if there isn't a user with the specified __{mail}__ that has registered by __Mail__ and not using Facebook or Google.
      tags:
        - user
      parameters:
        - name: mail
          in: path
          description: Mail of the user
          required: true
          type: string
          default: 'francesco.bruschetti@yahoo.it'
      responses: 
        200:
          description: Success
          schema:
              $ref: '#/definitions/MailResponse'
          examples:
            _id: '5c5406b4eb968f0017bcf388'
            email: 'francesco.bruschetti@yahoo.it'
            name: 'Francesco'
            image_url: 'https://www.iconspng.com/images/-abstract-user-icon-1/-abstract-user-icon-1.jpg'
            password: 'Password'
            ETH: 0
            BTC: 0
            USD: 0
            __v: 0
 

############################################ 
###################### DEFINITIONS      
############################################ 
definitions:
  #Actions:
  #  allOf:
  #    - $ref: '#/definitions/Actions'
  
###################### ACCOUNT
  Google:
    type: object
    properties:
      tokenid:
        type: string
        description: 'The value is just an example, it may be espired.'
        example: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjZmYjA1Zjc0MjM2NmVlNGNmNGJjZjQ5Zjk4NGM0ODdlNDVjOGM4M2QiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNTMzMDI0NTUyNTcyLWx0Ymw0a3Mxa2liNXFvZDljZ2loYzJwcGpoY2RlbTJsLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNTMzMDI0NTUyNTcyLWx0Ymw0a3Mxa2liNXFvZDljZ2loYzJwcGpoY2RlbTJsLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTA3MzYwNTI1OTMzNTMyODAxMzkwIiwiaGQiOiJzdHVkZW50aS51bml0bi5pdCIsImVtYWlsIjoiZnJhbmNlc2NvLmJydXNjaGV0dGlAc3R1ZGVudGkudW5pdG4uaXQiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6IlRpS2x3M3NVZ1lvS19ueE1TaFMtTFEiLCJuYW1lIjoiRnJhbmNlc2NvIEJydXNjaGV0dGkiLCJwaWN0dXJlIjoiaHR0cHM6Ly9saDQuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1WNW1aRVV4RUZxWS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBQS9BQ2V2b1FOMjBGdmxRZnJUeFl6Tk9BQ0U5Q2tsRDN1dkJRL3M5Ni1jL3Bob3RvLmpwZyIsImdpdmVuX25hbWUiOiJGcmFuY2VzY28iLCJmYW1pbHlfbmFtZSI6IkJydXNjaGV0dGkiLCJsb2NhbGUiOiJpdCIsImlhdCI6MTU0OTE5MTA4NywiZXhwIjoxNTQ5MTk0Njg3LCJqdGkiOiJjMzVhNmYzZjA2NGYwOTVjMTEzMWQwZGM3OWM1MzlkYzIxZTU1NmY5In0.wuIN-cCRapuiaTTx64rFhtmnJNHEUCKPiDGSQQ8slsbtBl7ArDqHlwt6rel1uB1MTEBX6Hn6VHIhXv8KB1Gz4p2gK0jHA0Ms006K8Y6dMXje8RvkOu_GjF6JdV2SbnhbASsHdI4671rxklygICoCntBVbJYQWS7E7ijHISLbW_uPf2744iIH1BdSuQQaE9TGuab81-vUUeL05qjZBKsIUF9ERg1il4PZ1bwHXbG1xAdk-ey3qi_QGj1ZAR_Ii7v6laJan-ACVOEwiSwvrbVdBxqbzhO7wJEN0h9idZ1ZWNLZy_rcATrnNAkvKehgXEMRSqW53ulxoJOMBFxDiNxhtA'
      user:
        type: object
        properties:
          id_google:
            type: string
            example: '107360525933532801390'
          name:
            type: string
            example: 'Francesco Bruschetti'
          image_url:
            type: string
            example: 'https://lh4.googleusercontent.com/-V5mZEUxEFqY/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQN20FvlQfrTxYzNOACE9CklD3uvBQ/s96-c/photo.jpg'
          email:
            type: string
            example: 'francesco.bruschetti@studenti.unitn.it'

  Facebook:
    type: object
    properties:
      tokenid:
        type: string
        description: 'The value is just an example, it may be espired.'
        example: 'EAAe9iyaWCEoBANk6BcMda3yEZCfoTukaIZBECbOvaTyZBZCOCJNSv6WrZCpTye9nSTEN9Dije4MXfVsLFGJKLeZBn5TtafQrCaHRDZAHDgX9wWjfWoHkaZBfbpBZCMkc26BwWCNZBpaObqFXf7rwlj2gRa7u2eHYJ5puZCNk5qfsy4bSdLe9uJrJAud5lN3725C1DoCGY3eZBnY4DwZDZD'
      user:
        type: object
        properties:
          id_google:
            type: string
            example: '2146357875458989'
          name:
            type: string
            example: 'Francesco Bruschetti'
          image_url:
            type: string
            example: 'http://graph.facebook.com/2146357875458989/picture?type=square'
          email:
            type: string
            example: 'francesco.bruschetti@tiscali.it'

######################ACTION
  ActionBuy:
    type: object
    properties:
      currency: 
        type: string
      amount:
        type: integer
  
  ActionSell:
    type: object
    properties:
      currency: 
        type: string
      amount:
        type: integer
        
  ActionPlannedactionBuy:
    type: object
    properties:
      currency: 
        type: string
      amount:
        type: integer
      USD:
        type: number

  ActionPlannedactionSell:
    type: object
    properties:
      currency: 
        type: string
      amount:
        type: integer
      USD:
        type: number

###################### PLANNEDACTION
  
  PlannedactionSchema:
    type: object
    properties:
      author:
        type: string
        example: '5c49e7f329202200177264e7'
      action:
        type: string
        example: 'BUY'
      state:
        type: string
        example: 'IDLE'
      BTC:            # TODO: BTC deve essere mutualmente esclusivo con ETH
        type: number
        example: 1
      ETH:
        type: number
      USD:
        type: number
        example: 3600

  PlannedactionRequest:
    type: object
    properties: 
      author:
        type: string
        example: '5c4c430e66f8f600177f2d3f'
      action:
        type: string
        example: 'BUY'
      USD:
        type: number
        example: 3600
      BTC: 
        type: number
        example: 1
      ETH:
        type: number
        example: 1
        
  PlannedactionPUTRequest:
    type: object
    properties: 
      author:
        type: string
        example: '5c4c430e66f8f600177f2d3f'
      action:
        type: string
        example: 'BUY'
      state: 
        type: string
        example: 'CANCELLED'
      USD:
        type: number
        example: 3600
      BTC: 
        type: number
        example: 1
      ETH:
        type: number
        example: 1
  
  PlannedActionCheckTriggers:
    type: object
    properties: 
      BTC:
        type: number
      ETH:
        type: number
        
  CheckTriggersResponse:
    type: object
    properties: 
      status:
        type: array
        items: 
          type: object
      actionsPerformed:
        type: integer
  
###################### PRICE      
  Prices: 
    properties:
      BTC: 
        type: object
        properties:
          _id:
            type: string
          BTCUSD:
            type: number
                    
      ETH:
        type: object
        properties:
          _id:
            type: string
          ETHUSD:
            type: number
  
  BTCUSDarray: 
    type: object
    properties:
      _id:
        type: string
      BTCUSD:
        type: number
  
  ETHUSDarray: 
    type: object
    properties:
      _id:
        type: string
      ETHUSD:
        type: number
        
  DatabasePostPrice:
    type: object
    properties: # non possono esserci entrambi contemporaneamente
      BTCUSD:
        type: number
      ETHUSD:
        type: number

###################### TRANSACTION      
  TransactionUser: 
    properties:
      _id: 
        type: string
      author: 
        type: string
      action: 
        type: string
      USD: 
        type: number
      ETH:    # ETH and BTC must be mutually exclusive
        type: number
      BTC: 
        type: number

  NewUserTransaction: 
    type: object
    properties:
      author:
        type: string
        example: '5c49e7f329202200177264e7'
      action:
        type: string
        example: 'BUY'
      state:
        type: string
        example: 'IDLE'
      USD:
        type: number
        example: 117
      BTC:
        type: number
        example: 1
      ETH:
        type: number
        example: 1
    
###################### USER      
  UserProfile:
    properties:
      _id:
        type: string
      id_google:
        type: string
      id_facebook:
        type: string
      name:
        type: string
      image_url:
        type: string
      email:
        type: string
      _v: 
        type: number
      ETH:
        type: number
      BTC: 
        type: number
      USD:
        type: number
 
  UserBalance:
    properties: # user can set just one, two or all the property
      ETH:
        type: number
      BTC: 
        type: number
      USD:
        type: number
    minItems: 1

  GoogleUser:
    type: object
    properties:
      _id:
        type: string
        example: '5c518276900b4aa6997199c7'
      id_google:
        type: string
        example: '104274752162011745431'
      name:
        type: string
        example: 'Gianluca Pasqua'
      image_url:
        type: string
        example: 'https://lh4.googleusercontent.com/-SM1aXyNMg9k/AAAAAAAAAAI/AAAAAAAAAAA/ACevoQNr5N7wwUU5XlewoItX5FAUYSKlZA/s96-c/photo.jpg'
      email:
        type: string
        example: 'gianluca.pasqua@studenti.unitn.it'
      ETH:
        type: number
        example: 1
      BTC: 
        type: number
        example: 2
      USD:
        type: number
        example: 3650
  
  FacebookUser:
    type: object
    properties:
      _id:
        type: string
        example: '5c4c430e66f8f600177f2d3f'
      id_facebook:
        type: string
        example: '2146357875458989'
      name:
        type: string
        example: 'Francesco Bruschetti'
      image_url:
        type: string
        example: 'http://graph.facebook.com/2146357875458989/picture?type=square'
      email:
        type: string
        example: 'francesco.bruschetti@tiscali.it'
      ETH:
        type: number
        example: 113
      BTC: 
        type: number
        example: 3600
      USD:
        type: number
        example: 7343.365

  MailRequest:
    properties:
      name:
        type: string
        example: 'Test Name'
      email:
        type: string
        example: 'test@email.it'
      password:
        type: string
        example: 'Password'

  MailResponse:
    properties:
      _id:
        type: string
        example: '5c5406b4eb968f0017bcf388'
      name:
        type: string
        example: 'Francesco'
      image_url:
        type: string
        example: 'https://www.iconspng.com/images/-abstract-user-icon-1/-abstract-user-icon-1.jpg'
      email:
        type: string
        example: 'francesco.bruschetti@yahoo.it'
      password:
        type: string
        example: 'Password'
      _v: 
        type: number
        example: 0
      ETH:
        type: number
        example: 0
      BTC: 
        type: number
        example: 0
      USD:
        type: number
        example: 0

tags:
  - name: account
    description: List of available API for the ws *Account*.
  - name: action
    description: List of available API for the ws *Action*.
  - name: database
    description: List of available API for the ws *Database*.
  - name: plannedaction
    description: List of available API for the ws *Plannedaction*.
  - name: price
    description: List of available API for the ws *Price*.
  - name: redirect
    description: List of available API for the ws *Redirect*.
  - name: transaction
    description: List of available API for the ws *Transaction*.
  - name: user
    description: List of available API for the ws *User*.